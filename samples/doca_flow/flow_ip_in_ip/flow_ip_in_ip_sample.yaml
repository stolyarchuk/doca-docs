#
# Copyright (c) 2025 NVIDIA CORPORATION AND AFFILIATES.  All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are permitted
# provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright notice, this list of
#       conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright notice, this list of
#       conditions and the following disclaimer in the documentation and/or other materials
#       provided with the distribution.
#     * Neither the name of the NVIDIA CORPORATION nor the names of its contributors may be used
#       to endorse or promote products derived from this software without specific prior written
#       permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NVIDIA CORPORATION BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TOR (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

number_of_ports: 2
mode_args:
  - vnf
ports_decription:
  port_0: doca_dev
  port_1: doca_dev
description: "This sample demonstrates how to encap either IPv4 or IPv6 packets with IP-in-IPv6 tunneling.
              Sample Command Line: ./build/doca_flow_ip_in_ip  -a auxiliary:mlx5_core.sf.2,dv_flow_en=2 -a auxiliary:mlx5_core.sf.3,dv_flow_en=2 -- -l 60"
use_cases:
  - name: "Flow ip-in-ip use case #1: IPv4 encap -> IPv6/IPv4"
    args: ""
    stages:
      - name: "Sending packets iteration 1"
        packets_to_send:
          - receiving_port: 0
            packets:
              - Ether()/IP()/TCP(sport=1234, dport=80)/Raw(load=b'IPv4 Packet received on port 0 -> encap in IPv6 -> forwarded to port 1')
        validation:
          - type: packet
            expected_packets:
              - forwarding_port: 1
                packets:
                  - Ether(src='aa:bb:cc:dd:ee:ff', dst='11:22:33:44:55:66')/IPv6(tc=216, nh=4, hlim=64, src='1111:5555:2222:6666:3333:7777:4444:8888', dst='aaaa:eeee:bbbb:ffff:cccc:0:dddd:9999')/IP()/TCP(sport=1234, dport=80)/Raw(load=b'IPv4 Packet received on port 0 -> encap in IPv6 -> forwarded to port 1')
  - name: "Flow ip-in-ip use case #2: IPv6 encap -> IPv6/IPv6"
    args: ""
    stages:
      - name: "Sending packets iteration 1"
        packets_to_send:
          - receiving_port: 0
            packets:
              - Ether()/IPv6()/UDP(sport=5678, dport=80)/Raw(load=b'IPv6 Packet received on port 0 -> encap in IPv6 -> forwarded to port 1')
        validation:
          - type: packet
            expected_packets:
              - forwarding_port: 1
                packets:
                  - Ether(src='ff:ee:dd:cc:bb:aa', dst='66:55:44:33:22:11')/IPv6(tc=216, nh=41, hlim=64, src='4444:8888:3333:7777:2222:6666:1111:5555', dst='dddd:9999:cccc:0:bbbb:ffff:aaaa:eeee')/IPv6()/UDP(sport=5678, dport=80)/Raw(load=b'IPv6 Packet received on port 0 -> encap in IPv6 -> forwarded to port 1')
  - name: "Flow ip-in-ip use case #3: IPv6/IPv4 decap -> IPv4"
    args: ""
    stages:
      - name: "Sending packets iteration 1"
        packets_to_send:
          - receiving_port: 1
            packets:
              - Ether()/IPv6()/IP()/TCP(sport=1234, dport=80)/Raw(load=b'IPv6/IPv4 Packet received on port 1 -> decap -> forwarded to port 0')
        validation:
          - type: packet
            expected_packets:
              - forwarding_port: 0
                packets:
                  - Ether(src='77:88:99:aa:bb:cc', dst='dd:ee:ff:11:22:33')/IP()/TCP(sport=1234, dport=80)/Raw(load=b'IPv6/IPv4 Packet received on port 1 -> decap -> forwarded to port 0')
  - name: "Flow ip-in-ip use case #4: IPv6/IPv6 decap -> IPv6"
    args: ""
    stages:
      - name: "Sending packets iteration 1"
        packets_to_send:
          - receiving_port: 1
            packets:
              - Ether()/IPv6()/IPv6()/UDP(sport=5678, dport=80)/Raw(load=b'IPv6/IPv6 Packet received on port 1 -> decap -> forwarded to port 0')
        validation:
          - type: packet
            expected_packets:
              - forwarding_port: 0
                packets:
                  - Ether(src='cc:bb:aa:99:88:77', dst='33:22:11:ff:ee:dd')/IPv6()/UDP(sport=5678, dport=80)/Raw(load=b'IPv6/IPv6 Packet received on port 1 -> decap -> forwarded to port 0')
