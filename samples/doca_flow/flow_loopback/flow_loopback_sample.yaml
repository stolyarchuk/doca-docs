#
# Copyright (c) 2025 NVIDIA CORPORATION AND AFFILIATES.  All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are permitted
# provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright notice, this list of
#       conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright notice, this list of
#       conditions and the following disclaimer in the documentation and/or other materials
#       provided with the distribution.
#     * Neither the name of the NVIDIA CORPORATION nor the names of its contributors may be used
#       to endorse or promote products derived from this software without specific prior written
#       permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NVIDIA CORPORATION BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TOR (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

number_of_ports: 2
mode_args:
  - vnf
ports_description:
  port_0: doca_dev
  port_1: doca_dev
description: "This sample receives a packet, encapsulates it with VXLAN, and loops it back to the same port. Re-injected (encapsulated) packets are marked with 10, while others are marked with 0.
              Sample Command Line: ./build/doca_flow_loopback  -a auxiliary:mlx5_core.sf.2,dv_flow_en=2 -a auxiliary:mlx5_core.sf.3,dv_flow_en=2 -- -l 60"
use_cases:
  - name: "Flow loopback use case #1"
    args: ""
    stages:
      - name: "Sending packets iteration 1"
        packets_to_send:
          - receiving_port: 0
            packets:
              - Ether()/IP(src='1.2.3.4', dst='8.8.8.8')/TCP(sport=1234, dport=80)/Raw(load=b'Packet received on port 0 -> matches the tcp pipe -> goes to the egress domain -> encaped -> Re-injected to port 0 -> miss the tcp pipe and goes to the udp -> mark with meta data 10 -> goes to the egress domain -> misses the loopback pipe and dropped')
              - Ether()/IP(src='1.2.3.5', dst='8.8.8.8')/TCP(sport=1234, dport=80)/Raw(load=b'Packet received on port 0 -> misses the tcp pipe -> dropped')
              - Ether()/IP(src='11.21.31.41', dst='81.81.81.81')/UDP(sport=1234, dport=80)/Raw(load=b'Packet received on port 0 -> misses the tcp pipe and goes to the udp -> marked -> dropped')
        validation:
          - type: dump
            expected_text:
              - "Packet received with meta data 0"
              - "Packet received with meta data 10"
              - "Packet received with meta data 10"
